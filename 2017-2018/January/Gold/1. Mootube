#include <bits/stdc++.h>
using namespace std;
#define lli long long int
#define f first
#define s second
#define pb push_back
#define MAXN 100005
#define INF 2000000005
#define mod 1000000007
#define loop(i,a,b) for  (lli i=(a); i<= (signed)(b); i++)
#define lp(i,a) for(lli i = 0;i<(signed)(a); i++)
#define rev(a) reverse(a.begin(), a.end())
#define debug cout<<"I am here"<<endl;
#define rep(n) for(lli i = 0; i< n; i++)
typedef vector<lli> vi;
/*
   fThe idea is to make union find with the points. You need to sort queries by largest values first and then connect all values that have larger relevancies
   as you go down ,the tree still persists
   for these problems, you want to take note of 
      1. If the tree is the if you increase or decrease the values 
*/
lli n, m;
lli link[MAXN], sz[MAXN];
struct query
{
    lli relevance, node, ord;
};
set<pair<int,pair<int,int>>> edge;
void initialize()
{
    lp(i,n)
    {
        link[i] = i;
        sz[i] = 1;
    }
}
bool cmp(query a,query b)
{

    return a.relevance > b.relevance;
}
//UF algo
lli find(lli x)
{
    while(link[x] != x) x=  link[x];
    return x;
}
void join(lli a, lli b)
{
    lli x = find(a), y = find(b);
    if(sz[x]  > sz[y]) swap(x,y);
    link[x] = y;
    sz[y] += sz[x];
}
int main()
{
    freopen("mootube.in","r", stdin);
    freopen("mootube.out","w", stdout);
    cin>>n>>m;
    lp(i,n-1){
       lli a,b, w;
       cin>>a>>b>> w;
       a--, b--;
       edge.insert({w,{a,b}});
    }
    lli ans[MAXN];
    vector<query> q;
    lp(i ,m)
    {
       lli k,v;
       cin>>k>>v;
        v--;
       q.pb({k, v, i});
    }
    ///get largest relevance needed first
    sort(q.begin() ,q.end(), cmp);
    initialize();
    for(auto it: q)
    {
        auto cur = edge.lower_bound({it.relevance, {-1, -1}});
        while(cur != edge.end()){
            if(find(cur->s.f) != find(cur->s.s)) {
                    join(cur->s.f, cur->s.s);
            }
            cur = edge.erase(cur);
        }
        ans[it.ord] = sz[find(it.node)] -1;
    }
    lp(i,m) cout<<ans[i]<<endl;;
}
