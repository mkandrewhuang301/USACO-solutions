#include <bits/stdc++.h>
using namespace std;
#define lli long long int
#define f first
#define s second
#define pb push_back
#define MAXN 100005
#define INF 2000000005
#define mod 1000000007
#define loop(i,a,b) for  (lli i=(a); i<= (signed)(b); i++)
#define lp(i,a) for(lli i = 0;i<(signed)(a); i++)
#define rev(a) reverse(a.begin(), a.end())
#define debug cout<<"I am here"<<endl;
#define rep(n) for(lli i = 0; i< n; i++)
typedef vector<lli> vi;
/*
   if any child same color as current, return 0
    test all three colors
   since each distinct. multiply possible of ways of children of two other colors
   if already painted, then two other colors dp of that barn is zero

*/
vector<lli> adj[MAXN];
vector<vector<lli>> dp(MAXN, vector<lli> (4, INF)); /// <vertex, color>;
lli painted[MAXN];
lli dfs(lli v,lli color, lli p)
{
    if(dp[v][color] != INF ) return dp[v][color];
    dp[v][color] = 1;
    for(auto c: adj[v]){
        if(c == p) continue;
        if(painted[c] == color ) {
            dp[v][color] *=0;
            continue;
        }
        else{
            dp[v][color] *= (dfs(c, (color  +1)%3, v) + dfs(c, (color  +2)%3, v));
        }
        dp[v][color] %= mod;
    }
    return dp[v][color];
}
int main()
{
    freopen("barnpainting.in", "r", stdin);
    freopen("barnpainting.out","w" ,stdout);
    lli n, k;
    cin>>n>>k;
    lp(i,n-1){
      lli a,b;
      cin>>a>>b;
      adj[a].pb(b);
      adj[b].pb(a);
    }
    memset(painted, -1 , sizeof(painted));
    lp(i,k){
      lli v,c;
      cin>>v>>c;
      c--;
      dp[v][(c+1)%3] = 0;
      dp[v][(c+2)%3] = 0;
      ///cannot make this vertex a certain color because already pallied
      painted[v] = c;
    }
    dfs(1,0, 1);
    dfs(1,1, 1);
    dfs(1,2, 1);
    cout<<(dp[1][0]  + dp[1][1] + dp[1][2])%mod;

}
