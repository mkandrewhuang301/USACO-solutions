#include <bits/stdc++.h>
using namespace std;
#define lli long long int
#define f first
#define s second
#define pb push_back
#define MAXN 2000005
#define INF 10000000000000005
#define mod 1000000007
#define loop(i,a,b) for  (int i=(a); i<= (signed)(b); i++)
#define lp(i,a) for(int i = 0;i<(signed)(a); i++)
#define rev(a) reverse(a.begin(), a.end())
#define print(a) cout<<a<<" ";
#define printl(a) cout<<a<<endl;
#define debug cout<<"I am here"<<endl;
#define rep(n) for(int i = 0; i< n; i++)
typedef vector<lli> vi;
/*
    work backwards and see if the size of the tree is the expected value. If it is, then yes.
*/

int n,m;
vector<int> adj[MAXN];
int link[MAXN], sz[MAXN];
int find(int a)
{
    while(link[a] != a) a = link[a];
    return a;
}
void join(int a, int b)
{
    int x = find(a); int y = find(b);
    if(sz[x] > sz[y]) swap(x,y);
    link[x] = y;
    sz[y] += sz[x];
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    freopen("closing.in", "r", stdin);
    freopen("closing.out", "w", stdout);
   cin>>n>>m;
   loop(i,1,n) {
      link[i] = i;
      sz[i]  =1;
   }
   lp(i,m){
      int a,b;
      cin>>a>>b;
      adj[a].pb(b);
      adj[b].pb(a);
   }
   vector<int> order;
   bool seen[MAXN];
   lp(i,n){
      int v;
      cin>>v;
      order.pb(v);
   }
   reverse(order.begin(), order.end());
   vector<string>ans;
   for(int i = 0; i<n; i++){
      auto &v = order[i];
      seen[v] = true;
      for(auto it: adj[v]){
        if(seen[it] && find(it) != find(v)){
            join(it, v);
        }
      }
      ans.pb((sz[find(v)]  == i+1?"YES" : "NO" ));
   }
   reverse(ans.begin(), ans.end());
   for(auto it: ans){
      printf("%s\n", it.c_str());
   }
   return 0;
}
