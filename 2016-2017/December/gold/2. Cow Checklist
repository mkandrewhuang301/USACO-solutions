#include <bits/stdc++.h>
using namespace std;
#define lli long long int
#define f first
#define s second
#define pb push_back
#define MAXN 1005
#define INF 2e9  + 5
#define mod 1000000007
#define loop(i,a,b) for  (lli i=(a); i<= (signed)(b); i++)
#define lp(i,a) for(lli i = 0;i<(signed)(a); i++)
#define rev(a) reverse(a.begin(), a.end())
#define debug cout<<"I am here"<<endl;
#define rep(n) for(lli i = 0; i< n; i++)
typedef vector<lli> vi;
/*
    get dp[h][g][k]   = min distance at hth holstein and gth guernsey, ending on either h or g
       k = 0  end on h
       k = 1 end on g
    transition is h+1] or[g+1]
    push dp

*/
struct coord
{
    lli x = 0,y = 0;
};
lli dist (coord a, coord b)
{
    return (a.x - b.x)*(a.x - b.x) + (a.y - b.y)*(a.y - b.y);
}
lli dp[MAXN][MAXN][2];
int main()
{
    //freopen("D://3.in","r", stdin);
    freopen("checklist.in","r", stdin);
    freopen("checklist.out", "w", stdout);
   lli n, m;
   cin>>n>>m;
   vector<coord>hol(n+1);
   vector<coord> gur(m+1);
   loop(i,1,n){
       cin>>hol[i].x>>hol[i].y;
   }
   loop(i,1,m){
      cin>>gur[i].x>>gur[i].y;
   }
   memset(dp, 0x3f, sizeof(dp));
   dp[1][0][0] = 0;
   for(lli g = 0; g<=m; g++){
     for(lli h = 1; h<=n; h++){
          //go to g
          if(g!=m){ ///max is [n-1][m];
            if(dp[h][g][0] + dist(hol[h], gur[g+1]) < dp[h][g+1][1]){
                dp[h][g+1][1] =  dp[h][g][0] + dist(hol[h], gur[g+1]);;
            }
            if(dp[h][g][1] + dist(gur[g], gur[g+1]) < dp[h][g+1][1]){
                dp[h][g+1][1] =  dp[h][g][1] + dist(gur[g], gur[g+1]);;
            }
          }
          //go to h
          if(h!= n){ // max is [h][m]
            if(dp[h][g][0] + dist(hol[h], hol[h+1]) < dp[h+1][g][0]){
                dp[h+1][g][0] =  dp[h][g][0] + dist(hol[h], hol[h+1]);
            }
            if(dp[h][g][1] + dist(gur[g], hol[h+1]) < dp[h+1][g][0]){
                 dp[h+1][g][0] =  dp[h][g][1] + dist(gur[g], hol[h+1]);
            }
          }
     }
   }
   cout<<dp[n][m][0]<<endl;
}
