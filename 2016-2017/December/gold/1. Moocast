#include <bits/stdc++.h>
using namespace std;
#define lli long long int
#define f first
//#define s second
#define pb push_back
#define MAXN 1005
#define INF 2e9  + 5
#define mod 1000000007
#define loop(i,a,b) for  (lli i=(a); i<= (signed)(b); i++)
#define lp(i,a) for(lli i = 0;i<(signed)(a); i++)
#define rev(a) reverse(a.begin(), a.end())
#define debug cout<<"I am here"<<endl;
#define rep(n) for(lli i = 0; i< n; i++)
typedef vector<lli> vi;
/*
    get points and MST to find largest edge
    since n small, find each pair and then solve for edge values
*/
int link[MAXN];
int sz[MAXN];
struct coord
{
    int x, y;
};
struct stuff
{
    int from, to;
    int weight;
};
lli dist(coord a, coord b)
{
    return abs(a.y - b.y)* abs(a.y - b.y) + abs(a.x - b.x)* abs(a.x - b.x);
}
bool cmp(stuff a, stuff b)
{
    return a.weight < b.weight;
}
int find (int x)
{
    while(link[x] != x) x = link[x];
    return x;
}
void join(int a,int b)
{
    int x = find(a), y = find(b);
    if(sz[x]  >  sz[y]) swap(x,y);
    sz[y] += sz[x];
    link[x]  = y;
}
int main()
{
    freopen("moocast.in","r", stdin);
    freopen("moocast.out","w", stdout);
    int n;
    cin>>n;
    vector<coord> pt;
    lp(i,n){
       int x,y;
       cin>>x>>y;
       pt.pb({x,y});
    }
    vector<stuff> edge;
    for(int i = 0;  i < n; i++){
        for(int j = i+1; j<n;j++){
            edge.pb({i, j, dist(pt[i],pt[j])});
        }
    }
    sort(edge.begin(), edge.end(), cmp);
    for(int i = 0 ; i < n; i++){
        link[i] = i;
        sz[i] = 1;
    }
    int ans = 0 ;
    for(auto [from, to, weight]: edge){
        if(find(from) != find(to)){
            join(from ,to);
            ans = max(ans, weight);
            if(sz[find(from)] == n)break;
        }
    }
    cout<<ans<<endl;
}
