#include <bits/stdc++.h>
using namespace std;
#define lli long long int
#define f first
#define s second
#define pb push_back
#define MAXN 100007
#define INF 2000000005
#define mod 1000000007
#define loop(i,a,b) for  (lli i=(a); i<= (signed)(b); i++)
#define lp(i,a) for(lli i = 0;i<(signed)(a); i++)
#define rev(a) reverse(a.begin(), a.end())
#define debug cout<<"I am here"<<endl;
#define rep(n) for(lli i = 0; i< n; i++)
typedef vector<lli> vi;
/*
    dp problem.
    do[n][k][j] = best number of wins if you have nth order and kth swapps with last swap being a k
    ans  = sum of all best dp[n][i];
    transition: no change, change to another change to third
    hoof beat scissor
    scissor beat paper
    paper beat hoof
*/
int a[MAXN];
int dp[MAXN][22][4];
#define hoof 0
#define paper 1
#define scissor 2
int outcome(int bes, int fj)
{
    ///these are win conditions
    if (bes == hoof && fj == scissor) return 1;
    if(bes == scissor && fj == paper) return 1;
    if(bes == paper && fj == hoof) return 1;
    ///lose or tie
    return 0;
}
int main()
{
    //freopen("D://4.in","r", stdin);
    freopen("hps.in","r", stdin);
    freopen("hps.out","w", stdout);
    int n,k;
    cin>>n>>k;
    loop(i,1,n){
       char x;
       cin>>x;
       if(x == 'P') a[i] = paper;
       if(x == 'S') a[i] = scissor;
       if(x == 'H') a[i] = hoof;
    }
    memset(dp, 0, sizeof dp);
    for(int i = 1; i<=n; i++){
        for(int nswap = 1; nswap <=k+1; nswap++){
            for(int cur = 0; cur < 3; cur++){
                ///change
                dp[i][nswap][cur] = dp[i-1][nswap][cur]  + outcome(cur, a[i]);
                dp[i][nswap][cur] = max(dp[i][nswap][cur], dp[i-1][nswap -1][(cur+1)%3] + outcome(cur, a[i]));
                dp[i][nswap][cur] = max(dp[i][nswap][cur], dp[i-1][nswap -1][(cur+2)%3] + outcome(cur, a[i]));
            }
        }
    }
    int ans = 0;
    loop(nswap,1, k+1){
          //cout<<nswap<< " " <<cur<< "  "<<dp[n][nswap][cur]<<endl;
          ans = max(ans, dp[n][nswap][hoof]);
          ans = max(ans, dp[n][nswap][paper]);
          ans = max(ans, dp[n][nswap][scissor]);
    }
    cout<<ans<<endl;
}
