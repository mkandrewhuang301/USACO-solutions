#include <bits/stdc++.h>
using namespace std;
#define lli long long int
#define f first
#define s second
#define pb push_back
#define MAXN 1001
#define INF 2000000005
#define mod 1000000007
#define loop(i,a,b) for  (lli i=(a); i<= (signed)(b); i++)
#define lp(i,a) for(lli i = 0;i<(signed)(a); i++)
#define rev(a) reverse(a.begin(), a.end())
#define debug cout<<"I am here"<<endl;
#define rep(n) for(lli i = 0; i< n; i++)
typedef vector<lli> vi;
/*
    suppose you get most money, then function is 1000t - t^2. so t is bounded by 1000
    Now we can just find the the best sum of ecah location at time t by looping and then find best time to be at 0 through all the times
    times complexity( 1000* N*M)
*/
lli money[MAXN];
vector<lli> adj[MAXN];
lli dp[MAXN][MAXN]; ///amoutn of money made at time t

int main() {
    freopen("time.in","r", stdin);
    freopen("time.out","w", stdout);
    lli n, m ,c;
    cin>>n>>m>>c;
    lp(i,n){
       cin>>money[i];
    }
    lp(i,m){
      lli a,b;
      cin>>a>>b;
      a--, b--;
      adj[b].pb(a);
    }
    memset(dp, -1000005, sizeof dp );
    dp[0][0] = 0;

    for(int t = 1; t<1001; t++){
        for(int v = 0 ; v<n;v++){
            for(auto p: adj[v]){
                dp[t][v] = max(dp[t][v], dp[t-1][p]  +money[v]);
            }
        }
    }
    lli ans =0  ;
    loop(i,0,  1000)ans = max(ans, dp[i][0] - c*i*i);
    cout<<ans<<endl;

}
